#!/bin/bash

# üê≥ Docker Operations Script for Voice AI Assistant
# –£–¥–æ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
print_header() {
    echo -e "\n${BLUE}üê≥ $1${NC}\n"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —É—Å–ø–µ—Ö–∞
print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–∫–∏
print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker
check_docker() {
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        print_error "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ .env.local
check_env() {
    if [[ ! -f .env.local ]]; then
        print_error "–§–∞–π–ª .env.local –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        echo "–°–æ–∑–¥–∞–π—Ç–µ .env.local –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example:"
        echo "cp .env.example .env.local"
        echo "–ó–∞—Ç–µ–º –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à OPENAI_API_KEY"
        exit 1
    fi
    
    if ! grep -q "OPENAI_API_KEY=sk-" .env.local; then
        print_warning "–í–æ–∑–º–æ–∂–Ω–æ, OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env.local"
    fi
}

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞
build() {
    print_header "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞"
    check_docker
    check_env
    
    echo "–°–±–æ—Ä–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç..."
    if docker-compose build --no-cache; then
        print_success "–û–±—Ä–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω"
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –æ–±—Ä–∞–∑–∞"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
start() {
    print_header "–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    check_docker
    check_env
    
    if docker-compose up -d; then
        print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω"
        echo "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:3000"
        echo "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤: $0 logs"
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
        exit 1
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
stop() {
    print_header "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    check_docker
    
    if docker-compose down; then
        print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
        exit 1
    fi
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
restart() {
    print_header "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    stop
    start
}

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
logs() {
    print_header "–õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    check_docker
    
    if [[ "$2" == "follow" ]] || [[ "$2" == "-f" ]]; then
        docker-compose logs -f
    else
        docker-compose logs --tail=50
    fi
}

# –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
status() {
    print_header "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    check_docker
    
    echo "=== Docker Compose Services ==="
    docker-compose ps
    
    echo -e "\n=== Container Stats ==="
    if docker-compose ps | grep -q "Up"; then
        CONTAINER_ID=$(docker-compose ps -q voice-assistant)
        if [[ -n "$CONTAINER_ID" ]]; then
            docker stats "$CONTAINER_ID" --no-stream
        fi
    else
        echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
    
    echo -e "\n=== Health Check ==="
    if curl -f http://localhost:3000/api/session?action=stats 2>/dev/null; then
        print_success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã"
    else
        print_warning "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    fi
}

# –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤
cleanup() {
    print_header "–û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤"
    check_docker
    
    echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose down --remove-orphans
    
    echo "–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤..."
    docker image prune -f
    
    echo "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö volume..."
    docker volume prune -f
    
    print_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞
rebuild() {
    print_header "–ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞"
    check_docker
    check_env
    
    echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose down
    
    echo "–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
    docker-compose build --no-cache
    
    echo "–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    docker-compose up -d
    
    print_success "–ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    echo "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:3000"
}

# –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export_logs() {
    print_header "–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    
    if [[ ! -d ./logs ]]; then
        print_warning "–ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–Ω–∞—á–∞–ª–∞."
        exit 1
    fi
    
    EXPORT_DIR="./logs_export_$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$EXPORT_DIR"
    
    # –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    cp -r ./logs/* "$EXPORT_DIR/" 2>/dev/null || true
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    if docker-compose ps | grep -q "Up"; then
        docker-compose logs > "$EXPORT_DIR/docker_container.log" 2>&1
    fi
    
    print_success "–õ–æ–≥–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: $EXPORT_DIR"
}

# –ü–æ–º–æ—â—å
help() {
    echo -e "${BLUE}üê≥ Docker Operations Script for Voice AI Assistant${NC}\n"
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <–∫–æ–º–∞–Ω–¥–∞>"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  build     - –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑"
    echo "  start     - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
    echo "  stop      - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
    echo "  restart   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
    echo "  status    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    echo "  logs      - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ (–¥–æ–±–∞–≤—å—Ç–µ 'follow' –¥–ª—è real-time)"
    echo "  cleanup   - –û—á–∏—Å—Ç–∏—Ç—å Docker —Ä–µ—Å—É—Ä—Å—ã"
    echo "  rebuild   - –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫"
    echo "  export    - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ª–æ–≥–∏"
    echo "  help      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 build"
    echo "  $0 start"
    echo "  $0 logs follow"
    echo "  $0 status"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-help}" in
    build)
        build
        ;;
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    logs)
        logs "$@"
        ;;
    status)
        status
        ;;
    cleanup)
        cleanup
        ;;
    rebuild)
        rebuild
        ;;
    export)
        export_logs
        ;;
    help|--help|-h)
        help
        ;;
    *)
        print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
        help
        exit 1
        ;;
esac 
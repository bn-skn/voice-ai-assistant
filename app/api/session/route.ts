import { NextRequest, NextResponse } from 'next/server'
import { DEFAULT_SYSTEM_PROMPT } from '../../config/system-prompt'
import { buildFinalSystemPrompt } from '../../config/protected-prompt'
import { 
  REALTIME_MODEL, 
  DEFAULT_VOICE, 
  REALTIME_API_URLs 
} from '../../config/realtime-config'
import sessionManager from '../../lib/session-manager'
import { withApiLogging, logApiEvent, logValidationError } from '../../lib/api-logger-middleware'
import { logOpenAICall, logSecureError } from '../../lib/logger'
import { randomUUID } from 'crypto'

/**
 * üîí API Route –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ephemeral token —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Å–µ—Å—Å–∏–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–∑–¥–∞–µ—Ç —É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —Å–µ—Å—Å–∏–∏
 */
async function handlePOST(req: NextRequest) {
  const requestId = randomUUID();
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if (!process.env.OPENAI_API_KEY) {
      logValidationError('OPENAI_API_KEY', 'missing', requestId);
      return NextResponse.json(
        { error: 'OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è' },
        { status: 500 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã URL —Å–Ω–∞—á–∞–ª–∞ (–¥–ª—è sendBeacon)
    const { searchParams } = new URL(req.url)
    const action = searchParams.get('action')
    const sessionIdFromUrl = searchParams.get('sessionId')

    // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (action === 'end' && sessionIdFromUrl) {
      logApiEvent('session_end_request', requestId, { sessionId: sessionIdFromUrl });
      await sessionManager.endSession(sessionIdFromUrl, 'user_disconnect')
      
      return NextResponse.json({ 
        success: true,
        message: '–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        stats: sessionManager.getStats()
      })
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏)
    let body: any = {}
    try {
      body = await req.json()
    } catch {
      // –ï—Å–ª–∏ —Ç–µ–ª–æ –ø—É—Å—Ç–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      body = {}
    }
    const { systemPrompt } = body

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ IP –∏ User-Agent
    const userIP = req.headers.get('x-forwarded-for') || 
                   req.headers.get('x-real-ip') || 
                   'unknown'
    const userAgent = req.headers.get('user-agent') || 'unknown'
    const userId = `${userIP}_${Buffer.from(userAgent).toString('base64').slice(0, 8)}`

    logApiEvent('session_create_request', requestId, { 
      userId, 
      userIP, 
      hasSystemPrompt: !!systemPrompt 
    });

    // ===== –ü–†–û–í–ï–†–ö–ê –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô –ß–ï–†–ï–ó –ú–ï–ù–ï–î–ñ–ï–† –°–ï–°–°–ò–ô =====
    const connectionResult = await sessionManager.requestConnection(userId)
    
    if (!connectionResult.success) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∂–¥–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥–∏
      logApiEvent('session_queue_added', requestId, { 
        userId, 
        queuePosition: connectionResult.queuePosition 
      });
      return NextResponse.json({ 
        error: 'session_limit_reached',
        message: connectionResult.message,
        queuePosition: connectionResult.queuePosition,
        stats: sessionManager.getStats()
      }, { status: 429 }) // Too Many Requests
    }

    // ===== –°–û–ó–î–ê–ï–ú OPENAI REALTIME TOKEN =====
    logApiEvent('openai_token_request', requestId, { sessionId: connectionResult.sessionId });

    const startTime = Date.now();
    const response = await fetch(REALTIME_API_URLs.session, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: REALTIME_MODEL,
        voice: DEFAULT_VOICE,
        instructions: buildFinalSystemPrompt(systemPrompt || DEFAULT_SYSTEM_PROMPT),
        modalities: ['text', 'audio'],
        input_audio_format: 'pcm16',
        output_audio_format: 'pcm16',
        input_audio_transcription: {
          model: 'whisper-1'
        }
      })
    })

    const duration = Date.now() - startTime;
    logOpenAICall('session', response.status, duration, { 
      requestId, 
      sessionId: connectionResult.sessionId 
    });

    if (!response.ok) {
      const errorText = await response.text()
      logSecureError(new Error(`OpenAI API error: ${response.status}`), 'session_creation', {
        requestId,
        status: response.status,
        details: errorText.substring(0, 200)
      });
      
      // –ï—Å–ª–∏ OpenAI API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–µ—Å—Å–∏—é
      await sessionManager.endSession(connectionResult.sessionId!, 'admin_stop')
      
      return NextResponse.json(
        { 
          error: 'Failed to create session',
          details: errorText,
          model: REALTIME_MODEL
        },
        { status: response.status }
      )
    }

    const data = await response.json()

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –∫ –æ—Ç–≤–µ—Ç—É
    const responseData = {
      ...data,
      sessionInfo: {
        sessionId: connectionResult.sessionId,
        timeLimit: connectionResult.timeLimit,
        message: connectionResult.message
      }
    }

    logApiEvent('session_created_successfully', requestId, { 
      sessionId: connectionResult.sessionId,
      timeLimit: connectionResult.timeLimit
    });
    
    return NextResponse.json(responseData)
  } catch (error: unknown) {
    logSecureError(error as Error, 'POST /api/session', { requestId });
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    )
  }
}

export const POST = withApiLogging(handlePOST);

/**
 * üîö API –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
 */
export async function DELETE(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url)
    const sessionId = searchParams.get('sessionId')
    const reasonParam = searchParams.get('reason') || 'user_disconnect'
    const reason = ['user_disconnect', 'time_expired', 'admin_stop'].includes(reasonParam) 
      ? reasonParam as 'user_disconnect' | 'time_expired' | 'admin_stop'
      : 'user_disconnect'

    if (!sessionId) {
      return NextResponse.json(
        { error: 'sessionId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      )
    }

    await sessionManager.endSession(sessionId, reason)
    
    return NextResponse.json({ 
      success: true,
      message: '–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      stats: sessionManager.getStats()
    })
  } catch (error: unknown) {
    console.error('[DELETE /api/session] –æ—à–∏–±–∫–∞:', error)
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    )
  }
}

/**
 * üìä API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–∞)
 */
async function handleGET(req: NextRequest) {
  const requestId = randomUUID();
  
  try {
    const { searchParams } = new URL(req.url)
    const action = searchParams.get('action')
    const sessionId = searchParams.get('sessionId')

    if (action === 'stats') {
      logApiEvent('stats_request', requestId);
      return NextResponse.json(sessionManager.getStats())
    }

    if (action === 'end' && sessionId) {
      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ GET (–¥–ª—è sendBeacon)
      logApiEvent('session_end_beacon', requestId, { sessionId });
      await sessionManager.endSession(sessionId, 'user_disconnect')
      
      return NextResponse.json({ 
        success: true,
        message: '–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        stats: sessionManager.getStats()
      })
    }

    if (action === 'forceEndAll') {
      // –ü—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ admin —Ç–æ–∫–µ–Ω–∞
      const adminToken = req.headers.get('x-admin-token')
      if (!adminToken || adminToken !== process.env.ADMIN_TOKEN) {
        logApiEvent('admin_access_denied', requestId, { hasToken: !!adminToken });
        return NextResponse.json(
          { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' },
          { status: 403 }
        )
      }

      logApiEvent('force_end_all_sessions', requestId, { adminToken: '[HIDDEN]' });
      await sessionManager.forceEndAllSessions()
      return NextResponse.json({ 
        success: true,
        message: '–í—Å–µ —Å–µ—Å—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã'
      })
    }

    logApiEvent('unknown_action', requestId, { action });
    return NextResponse.json(
      { error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' },
      { status: 400 }
    )
  } catch (error: unknown) {
    logSecureError(error as Error, 'GET /api/session', { requestId });
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    )
  }
} 

export const GET = withApiLogging(handleGET); 
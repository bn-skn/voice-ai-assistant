/**
 * üîí –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π
 * –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏
 */

import { 
  SESSION_LIMITS, 
  USER_LIMITS, 
  SESSION_MESSAGES,
  formatMessage,
  type SessionInfo,
  type QueuePosition,
  type SessionStats
} from '../config/session-limits';
import { createSessionLogger } from './logger';

// ===== –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –°–ï–†–í–ï–†–ê =====
class SessionManager {
  private activeSessions: Map<string, SessionInfo> = new Map();
  private userQueue: QueuePosition[] = [];
  private cooldownUsers: Set<string> = new Set();
  private sessionTimers: Map<string, NodeJS.Timeout> = new Map();
  private warningTimers: Map<string, NodeJS.Timeout[]> = new Map();
  private lastSessionEndTime: number = 0; // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
  private processQueueTimeout: NodeJS.Timeout | null = null; // –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è

  /**
   * –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async requestConnection(userId: string): Promise<{
    success: boolean;
    message: string;
    sessionId?: string;
    queuePosition?: number;
    timeLimit?: number;
  }> {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown
    if (this.cooldownUsers.has(userId)) {
      return {
        success: false,
        message: `‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${USER_LIMITS.COOLDOWN_SECONDS} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º.`
      };
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
    const activeSessionCount = this.activeSessions.size;
    
    if (activeSessionCount < USER_LIMITS.MAX_CONCURRENT_USERS) {
      // –ú–µ—Å—Ç–æ —Å–≤–æ–±–æ–¥–Ω–æ - —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
      return this.createSession(userId);
    } else {
      // –ú–µ—Å—Ç–æ –∑–∞–Ω—è—Ç–æ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
      return this.addToQueue(userId);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
   */
  private createSession(userId: string): {
    success: boolean;
    message: string;
    sessionId: string;
    timeLimit: number;
  } {
    const sessionId = `session_${Date.now()}_${userId}`;
    const startTime = Date.now();
    
    const sessionInfo: SessionInfo = {
      sessionId,
      userId,
      startTime,
      isActive: true,
      timeRemaining: SESSION_LIMITS.MAX_SESSION_DURATION_MINUTES
    };

    this.activeSessions.set(sessionId, sessionInfo);
    
    // –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —Å–µ—Å—Å–∏–∏
    const logger = createSessionLogger(sessionId, userId);
    logger.info('Session created', {
      timeLimit: SESSION_LIMITS.MAX_SESSION_DURATION_MINUTES,
      warningTimes: SESSION_LIMITS.WARNING_TIMES,
      activeSessions: this.activeSessions.size
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
    this.setupSessionTimers(sessionId);
    
    return {
      success: true,
      message: formatMessage(SESSION_MESSAGES.SESSION_STARTED, {
        minutes: SESSION_LIMITS.MAX_SESSION_DURATION_MINUTES
      }),
      sessionId,
      timeLimit: SESSION_LIMITS.MAX_SESSION_DURATION_MINUTES
    };
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
   */
  private addToQueue(userId: string): {
    success: boolean;
    message: string;
    queuePosition: number;
  } {
    const logger = createSessionLogger('queue', userId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingPosition = this.userQueue.findIndex(q => q.userId === userId);
    
    if (existingPosition !== -1) {
      // –£–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
      logger.info('User already in queue', { position: existingPosition + 1 });
      return {
        success: false,
        message: formatMessage(SESSION_MESSAGES.QUEUE_POSITION_UPDATE, {
          position: existingPosition + 1
        }),
        queuePosition: existingPosition + 1
      };
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    const queuePosition: QueuePosition = {
      userId,
      position: this.userQueue.length + 1,
      joinTime: Date.now(),
      estimatedWaitTime: this.calculateEstimatedWaitTime()
    };

    this.userQueue.push(queuePosition);
    
    logger.info('User added to queue', {
      position: queuePosition.position,
      estimatedWaitTime: queuePosition.estimatedWaitTime,
      queueLength: this.userQueue.length
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
    this.setupQueueTimer(userId);
    
    return {
      success: false,
      message: formatMessage(SESSION_MESSAGES.QUEUE_MESSAGE, {
        position: queuePosition.position
      }),
      queuePosition: queuePosition.position
    };
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
   */
  async endSession(sessionId: string, reason: 'user_disconnect' | 'time_expired' | 'admin_stop' = 'user_disconnect'): Promise<void> {
    const session = this.activeSessions.get(sessionId);
    if (!session) return;

    const logger = createSessionLogger(sessionId, session.userId);
    const sessionDuration = Date.now() - session.startTime;
    
    logger.info('Session ended', {
      reason,
      duration: `${Math.round(sessionDuration / 1000)}s`,
      activeSessions: this.activeSessions.size - 1
    });

    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
    this.clearSessionTimers(sessionId);
    
    // –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
    this.activeSessions.delete(sessionId);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    this.lastSessionEndTime = Date.now();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ cooldown
    this.cooldownUsers.add(session.userId);
    setTimeout(() => {
      this.cooldownUsers.delete(session.userId);
    }, USER_LIMITS.COOLDOWN_SECONDS * 1000);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å debounce –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
    if (this.processQueueTimeout) {
      clearTimeout(this.processQueueTimeout);
    }
    
    this.processQueueTimeout = setTimeout(async () => {
      await this.processQueue();
      this.processQueueTimeout = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    }, 500); // 500ms –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async processQueue(): Promise<void> {
    if (this.userQueue.length === 0) return;
    if (this.activeSessions.size >= USER_LIMITS.MAX_CONCURRENT_USERS) return;

    // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race condition  
    await new Promise(resolve => setTimeout(resolve, 300));
    
    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
    if (this.activeSessions.size >= USER_LIMITS.MAX_CONCURRENT_USERS) return;

    const nextUser = this.userQueue.shift();
    if (!nextUser) return;

    

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ –µ–≥–æ –æ—á–µ—Ä–µ–¥—å –ø–æ–¥–æ—à–ª–∞
    // (–í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã WebSocket push)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
    this.userQueue.forEach((user, index) => {
      user.position = index + 1;
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏
   */
  private setupSessionTimers(sessionId: string): void {
    const session = this.activeSessions.get(sessionId);
    if (!session) return;

    const timers: NodeJS.Timeout[] = [];

    // –¢–∞–π–º–µ—Ä—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    SESSION_LIMITS.WARNING_TIMES.forEach(warningMinutes => {
      const warningTime = (SESSION_LIMITS.MAX_SESSION_DURATION_MINUTES - warningMinutes) * 60 * 1000;
      
      const timer = setTimeout(() => {
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      }, warningTime);
      
      timers.push(timer);
    });

    // –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ 30 —Å–µ–∫—É–Ω–¥
    const finalWarningTime = (SESSION_LIMITS.MAX_SESSION_DURATION_MINUTES * 60 - SESSION_LIMITS.GRACEFUL_SHUTDOWN_SECONDS) * 1000;
    const finalTimer = setTimeout(() => {
      
    }, finalWarningTime);
    timers.push(finalTimer);

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    const mainTimer = setTimeout(() => {
      
      this.endSession(sessionId, 'time_expired');
    }, SESSION_LIMITS.MAX_SESSION_DURATION_MINUTES * 60 * 1000);

    this.sessionTimers.set(sessionId, mainTimer);
    this.warningTimers.set(sessionId, timers);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤ —Å–µ—Å—Å–∏–∏
   */
  private clearSessionTimers(sessionId: string): void {
    // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º–µ—Ä
    const mainTimer = this.sessionTimers.get(sessionId);
    if (mainTimer) {
      clearTimeout(mainTimer);
      this.sessionTimers.delete(sessionId);
    }

    // –¢–∞–π–º–µ—Ä—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    const warningTimers = this.warningTimers.get(sessionId);
    if (warningTimers) {
      warningTimers.forEach(timer => clearTimeout(timer));
      this.warningTimers.delete(sessionId);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏
   */
  private setupQueueTimer(userId: string): void {
    setTimeout(() => {
      const queueIndex = this.userQueue.findIndex(q => q.userId === userId);
      if (queueIndex !== -1) {
        this.userQueue.splice(queueIndex, 1);
        
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
        this.userQueue.forEach((user, index) => {
          user.position = index + 1;
        });
      }
    }, USER_LIMITS.QUEUE_TIMEOUT_MINUTES * 60 * 1000);
  }

  /**
   * –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
   */
  private calculateEstimatedWaitTime(): number {
    if (this.activeSessions.size === 0) return 0;
    
    // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞: —Å—Ä–µ–¥–Ω–µ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
    let totalRemainingTime = 0;
    for (const session of this.activeSessions.values()) {
      const elapsed = (Date.now() - session.startTime) / (1000 * 60); // –≤ –º–∏–Ω—É—Ç–∞—Ö
      const remaining = Math.max(0, SESSION_LIMITS.MAX_SESSION_DURATION_MINUTES - elapsed);
      totalRemainingTime += remaining;
    }
    
    return Math.ceil(totalRemainingTime / this.activeSessions.size);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  getStats(): SessionStats {
    return {
      activeSessions: this.activeSessions.size,
      queueLength: this.userQueue.length,
      cooldownUsers: this.cooldownUsers.size,
      timeSinceLastSessionEnd: Date.now() - this.lastSessionEndTime // –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
   */
  isSessionActive(sessionId: string): boolean {
    return this.activeSessions.has(sessionId);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏
   */
  getSessionInfo(sessionId: string): SessionInfo | null {
    return this.activeSessions.get(sessionId) || null;
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–∞)
   */
  async forceEndAllSessions(): Promise<void> {
    const logger = createSessionLogger('admin', 'system');
    
    logger.warn('Force ending all sessions', {
      activeSessions: this.activeSessions.size,
      queueLength: this.userQueue.length
    });
    
    const sessionIds = Array.from(this.activeSessions.keys());
    for (const sessionId of sessionIds) {
      await this.endSession(sessionId, 'admin_stop');
    }
    
    // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
    this.userQueue.length = 0;
    
    // –û—á–∏—â–∞–µ–º pending timeout
    if (this.processQueueTimeout) {
      clearTimeout(this.processQueueTimeout);
      this.processQueueTimeout = null;
    }
    
    logger.info('All sessions force ended', {
      sessionsEnded: sessionIds.length
    });
  }
}

// –°–∏–Ω–≥–ª—Ç–æ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π –¥–ª—è –≤—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
export const sessionManager = new SessionManager();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API routes
export default sessionManager; 
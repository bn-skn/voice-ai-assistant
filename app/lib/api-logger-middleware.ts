/**
 * üîç Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */

import { NextRequest, NextResponse } from 'next/server';
import { createApiLogger, logPerformance } from './logger';
import { randomUUID } from 'crypto';

// ===== –¢–ò–ü–´ =====
interface RequestMetrics {
  requestId: string;
  method: string;
  url: string;
  userAgent?: string;
  ip?: string;
  startTime: number;
  endTime?: number;
  duration?: number;
  status?: number;
  contentLength?: number;
  error?: Error;
}

// ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
const LOGGING_CONFIG = {
  // –ò—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã)
  excludePaths: [
    '/_next',
    '/favicon.ico',
    '/robots.txt',
    '/sitemap.xml'
  ],
  
  // –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (—Å–∫—Ä—ã–≤–∞–µ–º –≤ –ª–æ–≥–∞—Ö)
  sensitiveHeaders: [
    'authorization',
    'cookie',
    'x-api-key',
    'x-admin-token'
  ],
  
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  maxBodySize: 1024 // 1KB
} as const;

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å
 */
const shouldLogRequest = (url: string): boolean => {
  return !LOGGING_CONFIG.excludePaths.some(path => url.includes(path));
};

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ (—Å–∫—Ä—ã–≤–∞–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ)
 */
const sanitizeHeaders = (headers: Headers): Record<string, string> => {
  const sanitized: Record<string, string> = {};
  
  headers.forEach((value, key) => {
    if (LOGGING_CONFIG.sensitiveHeaders.includes(key.toLowerCase() as any)) {
      sanitized[key] = '[HIDDEN]';
    } else {
      sanitized[key] = value;
    }
  });
  
  return sanitized;
};

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
const sanitizeBody = async (request: NextRequest): Promise<string | null> => {
  try {
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
    const clonedRequest = request.clone();
    const text = await clonedRequest.text();
    
    if (text.length > LOGGING_CONFIG.maxBodySize) {
      return `[TRUNCATED - ${text.length} bytes]`;
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON –∏ —Å–∫—Ä—ã—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    try {
      const json = JSON.parse(text);
      const sanitized = JSON.stringify(json, (key, value) => {
        if (typeof key === 'string' && 
            (key.toLowerCase().includes('token') || 
             key.toLowerCase().includes('key') || 
             key.toLowerCase().includes('secret') ||
             key.toLowerCase().includes('password'))) {
          return '[HIDDEN]';
        }
        return value;
      });
      return sanitized;
    } catch {
      // –ï—Å–ª–∏ –Ω–µ JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
      return text;
    }
  } catch {
    return null;
  }
};

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
 */
const getClientIP = (request: NextRequest): string => {
  return request.headers.get('x-forwarded-for') || 
         request.headers.get('x-real-ip') || 
         'unknown';
};

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤
 */
export const apiLoggerMiddleware = async (
  request: NextRequest,
  handler: () => Promise<NextResponse>
): Promise<NextResponse> => {
  const startTime = Date.now();
  const requestId = randomUUID();
  const method = request.method;
  const url = request.url;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å
  if (!shouldLogRequest(url)) {
    return await handler();
  }
  
  // –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  const apiLogger = createApiLogger(method, url, requestId);
  
  // –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
  const metrics: RequestMetrics = {
    requestId,
    method,
    url,
    userAgent: request.headers.get('user-agent') || undefined,
    ip: getClientIP(request),
    startTime
  };
  
  // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞
  apiLogger.http('Request started', {
    requestId,
    method,
    url: new URL(url).pathname,
    ip: metrics.ip,
    userAgent: metrics.userAgent,
    headers: sanitizeHeaders(request.headers)
  });
  
  // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è POST/PUT/PATCH)
  if (['POST', 'PUT', 'PATCH'].includes(method)) {
    const body = await sanitizeBody(request);
    if (body) {
      apiLogger.debug('Request body', { requestId, body });
    }
  }
  
  let response: NextResponse;
  
  try {
    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    response = await handler();
    
    // –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç–≤–µ—Ç–∞
    metrics.endTime = Date.now();
    metrics.duration = metrics.endTime - metrics.startTime;
    metrics.status = response.status;
    metrics.contentLength = parseInt(response.headers.get('content-length') || '0');
    
    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    const logLevel = response.status >= 400 ? 'error' : 
                    response.status >= 300 ? 'warn' : 'info';
    
    apiLogger[logLevel]('Request completed', {
      requestId,
      status: response.status,
      duration: `${metrics.duration}ms`,
      contentLength: metrics.contentLength,
      success: response.status < 400
    });
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    logPerformance(`${method} ${new URL(url).pathname}`, metrics.duration, {
      requestId,
      status: response.status
    });
    
    return response;
    
  } catch (error) {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
    metrics.endTime = Date.now();
    metrics.duration = metrics.endTime - metrics.startTime;
    metrics.error = error as Error;
    
    apiLogger.error('Request failed', {
      requestId,
      duration: `${metrics.duration}ms`,
      error: {
        message: (error as Error).message,
        name: (error as Error).name,
        stack: (error as Error).stack
      }
    });
    
    // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
    throw error;
  }
};

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
export const withApiLogging = (
  handler: (req: NextRequest) => Promise<NextResponse>
) => {
  return async (req: NextRequest): Promise<NextResponse> => {
    return apiLoggerMiddleware(req, () => handler(req));
  };
};

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π API
 */
export const logApiEvent = (
  event: string,
  requestId: string,
  meta?: Record<string, any>
) => {
  const apiLogger = createApiLogger('EVENT', event, requestId);
  apiLogger.info(`API Event: ${event}`, meta);
};

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
export const logValidationError = (
  field: string,
  value: any,
  requestId: string,
  meta?: Record<string, any>
) => {
  const apiLogger = createApiLogger('VALIDATION', 'error', requestId);
  apiLogger.warn('Validation error', {
    field,
    value: typeof value === 'string' ? value.substring(0, 100) : value,
    ...meta
  });
};

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting
 */
export const logRateLimit = (
  ip: string,
  endpoint: string,
  requestId: string,
  meta?: Record<string, any>
) => {
  const apiLogger = createApiLogger('RATE_LIMIT', endpoint, requestId);
  apiLogger.warn('Rate limit exceeded', {
    ip,
    endpoint,
    ...meta
  });
}; 
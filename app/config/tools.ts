/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Tools (—Ñ—É–Ω–∫—Ü–∏–π) –¥–ª—è OpenAI Realtime API
 * –ó–¥–µ—Å—å –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ò–ò
 */

// –¢–∏–ø—ã –¥–ª—è OpenAI Realtime API Tools
export interface RealtimeTool {
  name: string;
  description: string;
  parameters: {
    type: 'object';
    properties: Record<string, unknown>;
    required?: string[];
  };
}

// –ë–∞–∑–æ–≤—ã–µ tools –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
export const AVAILABLE_TOOLS: RealtimeTool[] = [
  {
    name: "get_current_time",
    description: "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –≤—Ä–µ–º—è.",
    parameters: {
      type: "object",
      properties: {
        timezone: {
          type: "string",
          description: "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'Europe/Moscow', 'UTC')",
          enum: ["UTC", "Europe/Moscow", "America/New_York", "Asia/Tokyo"]
        }
      },
      required: []
    }
  },

  // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û - —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á
  // {
  //   name: "get_weather",
  //   description: "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ. –í—Å–µ–≥–¥–∞ —Å–ø—Ä–∞—à–∏–≤–∞–π –≥–æ—Ä–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º.",
  //   parameters: {
  //     type: "object",
  //     properties: {
  //       location: {
  //         type: "string",
  //         description: "–ì–æ—Ä–æ–¥ –∏–ª–∏ –ª–æ–∫–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã"
  //       },
  //       units: {
  //         type: "string",
  //         description: "–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã",
  //         enum: ["celsius", "fahrenheit"],
  //         default: "celsius"
  //       }
  //     },
  //     required: ["location"]
  //   }
  // },

  {
    name: "calculate",
    description: "–í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏.",
    parameters: {
      type: "object",
      properties: {
        expression: {
          type: "string",
          description: "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: '2 + 2 * 3', 'sqrt(16)', 'sin(30)')"
        }
      },
      required: ["expression"]
    }
  },

  {
    name: "search_web",
    description: "–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ ChatGPT web search. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–≥–¥–∞ –Ω—É–∂–Ω—ã —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ–≤–æ—Å—Ç–∏, —Ç–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –≤ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö.",
    parameters: {
      type: "object",
      properties: {
        query: {
          type: "string",
          description: "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ"
        },
        location: {
          type: "string", 
          description: "–õ–æ–∫–∞—Ü–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'Moscow', 'Russia', 'Saint Petersburg')",
          default: "Russia"
        }
      },
      required: ["query"]
    }
  }
];

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π (–±—É–¥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∫–æ–≥–¥–∞ –ò–ò –∑–∞–ø—Ä–æ—Å–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ)
export const TOOL_HANDLERS = {
  get_current_time: async (args: { timezone?: string }) => {
    const timezone = args.timezone || 'Europe/Moscow';
    const now = new Date();
    
    return {
      success: true,
      data: {
        current_time: now.toLocaleString('ru-RU', { 
          timeZone: timezone,
          year: 'numeric',
          month: 'long', 
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit'
        }),
        timezone: timezone,
        iso_string: now.toISOString()
      }
    };
  },

  // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û
  // get_weather: async (args: { location: string; units?: string }) => {
  //   // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ API –ø–æ–≥–æ–¥—ã
  //   return {
  //     success: false,
  //     error: "Weather API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á OpenWeatherMap –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.",
  //     data: {
  //       location: args.location,
  //       message: "–§—É–Ω–∫—Ü–∏—è –ø–æ–≥–æ–¥—ã —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ API"
  //     }
  //   };
  // },

  calculate: async (args: { expression: string }) => {
    try {
      // –ü—Ä–æ—Å—Ç–æ–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å math.js)
      const sanitized = args.expression.replace(/[^0-9+\-*/().\s]/g, '');
      const result = Function(`"use strict"; return (${sanitized})`)();
      
      return {
        success: true,
        data: {
          expression: args.expression,
          result: result,
          formatted: `${args.expression} = ${result}`
        }
      };
    } catch {
      return {
        success: false,
        error: "–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è",
        data: {
          expression: args.expression,
          message: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"
        }
      };
    }
  },

  search_web: async (args: { query: string; location?: string }) => {
    try {
      console.log('üîç Starting web search:', args);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à API endpoint –¥–ª—è –≤–µ–±-–ø–æ–∏—Å–∫–∞
      const response = await fetch('/api/search', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          query: args.query,
          location: args.location
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || `Search API error: ${response.status}`);
      }

      const result = await response.json();
      console.log('üîç Search completed successfully');

      return result;
    } catch (error) {
      console.error('üîç Web search error:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown search error',
        data: {
          query: args.query,
          message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–µ–±-–ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        }
      };
    }
  }
};

export type ToolHandler = typeof TOOL_HANDLERS[keyof typeof TOOL_HANDLERS];
export type ToolResult = Awaited<ReturnType<ToolHandler>>; 